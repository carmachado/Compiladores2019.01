package Sintatico;

public interface ParserConstants
{
    int START_SYMBOL = 49;

    int FIRST_NON_TERMINAL    = 49;
    int FIRST_SEMANTIC_ACTION = 91;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1,  3,  4, -1, -1,  2, -1, -1, -1,  1, -1, -1, -1, -1, -1,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1,  6,  6, -1, -1,  6, -1, -1, -1,  6, -1, -1, -1, -1, -1,  6, -1,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1,  8, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, -1, -1, 11, -1, -1, -1, 11, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, 14, 14, -1, -1, 14, -1, -1, -1, 14, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 15, 15, -1, -1, -1, -1, -1 },
        { -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 20, -1, -1, -1, -1, -1, -1, 20, 20, -1, -1, 20, -1, -1, -1, 20, -1, -1, -1, -1, 20, 20, -1, -1, -1, -1, 20, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20 },
        { -1, 21, -1, -1, -1, -1, -1, -1, 22, 22, -1, -1, 22, -1, -1, -1, 22, -1, -1, -1, -1, 21, 22, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21 },
        { -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, -1, -1, 23, -1, -1, -1, 23, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, 25, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25 },
        { -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, 26, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26 },
        { -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, 29, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, 36, 37, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 42, 42, 42, 42, 42, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, 42, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47 },
        { -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 49, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 52, 52, 52, 52, 52, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, 52, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, 52, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 53, 53, 53, 53, 53, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, 54, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, 53, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1, 57, 58, 58, 58, 58, 58, 58, -1, -1, -1, -1, 57, 57, -1, -1, -1, -1, -1, -1 },
        { -1, 59, 59, 59, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 61, 62, 63, 64, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, 67, 67, 67, 67, 67, 67, 67, 66, 66, -1, -1, 67, 67, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 70, 70, 70, 70, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, 70, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, 72, 72, 72, 72, 72, 72, 72, 72, 72, 71, 71, 72, 72, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, 74, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 75, 75, 75, 75, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, 75, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 77, 77, 77, 77, 77, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, 77, -1, -1, -1, -1, 77, 76, -1, -1, -1, -1, -1, -1, 77, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, 79, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, -1, -1, -1, -1, -1, -1 },
        { -1, 80, 81, 82, 83, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, -1, -1, 86, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 18, 52, 58,  8, 59, 11 },
        { 17 },
        { 13 },
        {  9 },
        { 10 },
        { 23 },
        { 50 },
        { 25 },
        {  0 },
        { 14, 19, 51,  2, 29, 53, 30, 52 },
        {  0 },
        { 55, 54 },
        { 43, 55, 54 },
        {  0 },
        { 50, 44, 57 },
        {  0 },
        { 41, 57 },
        {  2, 56 },
        {  0 },
        { 19,  2,  8, 59, 11, 58 },
        { 60, 63 },
        {  0 },
        { 61, 60 },
        { 50, 44, 57, 42 },
        {  0 },
        { 63 },
        { 64, 42, 62 },
        { 66 },
        { 68 },
        { 69 },
        { 29, 77, 30, 65 },
        { 74 },
        { 16, 63, 72, 11 },
        { 73, 63, 11 },
        {  2, 67, 77 },
        { 45 },
        { 46 },
        { 47 },
        { 22, 29, 57, 30 },
        { 28, 29, 71, 30 },
        {  0 },
        { 41, 71 },
        { 77, 70 },
        {  0 },
        { 15, 63 },
        { 27 },
        { 26 },
        { 48, 77 },
        { 76, 75 },
        {  0 },
        {  7, 78 },
        { 21, 78 },
        { 78, 75 },
        { 80 },
        { 24 },
        { 12 },
        { 20, 78 },
        {  0 },
        { 81, 84 },
        { 84, 79 },
        { 31 },
        { 32 },
        { 33 },
        { 34 },
        { 35 },
        { 36 },
        { 83, 82 },
        {  0 },
        { 37, 87 },
        { 38, 87 },
        { 87, 82 },
        { 86, 85 },
        {  0 },
        { 39, 90 },
        { 40, 90 },
        { 90, 85 },
        {  0 },
        { 71 },
        {  0 },
        { 29, 88, 30 },
        {  2, 89 },
        {  3 },
        {  4 },
        {  5 },
        {  6 },
        { 29, 77, 30 },
        { 37, 90 },
        { 38, 90 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "Esperado fim de programa", //Era esperado fim de programa
        "Esperado identificador", //Era esperado identificador
        "Esperado constante inteira", //Era esperado cte_int
        "Esperado constante real", //Era esperado cte_real
        "Esperado constante string", //Era esperado cte_string
        "Esperado constante char", //Era esperado cte_char
        "Esperado and", //Era esperado and
        "Esperado begin", //Era esperado begin
        "Esperado bool", //Era esperado bool
        "Esperado char", //Era esperado char
        "Esperado end", //Era esperado end
        "Esperado false", //Era esperado false
        "Esperado float", //Era esperado float
        "Esperado forward", //Era esperado forward
        "Esperado ifFalseDo", //Era esperado ifFalseDo
        "Esperado ifTrueDo", //Era esperado ifTrueDo
        "Esperado int", //Era esperado int
        "Esperado main", //Era esperado main
        "Esperado module", //Era esperado module
        "Esperado not", //Era esperado not
        "Esperado or", //Era esperado read
        "Esperado read",//Era esperado read
        "Esperado string",//Era esperado string
        "Esperado true",                            //        "Era esperado true",
        "Esperado void",                            //        "Era esperado void",
        "Esperado whileFalseDo",                            //        "Era esperado whileFalseDo",
        "Esperado whileTrueDo",                            //        "Era esperado whileTrueDo",
        "Esperado write",                            //        "Era esperado write",
        "Esperado (",                            //        "Era esperado \"(\"",
        "Esperado )",                            //        "Era esperado \")\"",
        "Esperado ==",                            //        "Era esperado \"==\"",
        "Esperado !=",                            //        "Era esperado \"!=\"",
        "Esperado <",                            //        "Era esperado \"<\"",
        "Esperado <=",                            //        "Era esperado \"<=\"",
        "Esperado >",                            //        "Era esperado \">\"",
        "Esperado >=",                            //        "Era esperado \">=\"",
        "Esperado +",                            //        "Era esperado \"+\"",
        "Esperado -",                            //        "Era esperado \"-\"",
        "Esperado *",                            //        "Era esperado \"*\"",
        "Esperado /",                            //        "Era esperado \"/\"",
        "Esperado ,",                            //        "Era esperado \",\"",
        "Esperado .",                            //        "Era esperado \".\"",
        "Esperado ;",                            //        "Era esperado \";\"",
        "Esperado :",                            //        "Era esperado \":\"",
        "Esperado =",                            //        "Era esperado \"=\"",
        "Esperado +=",                            //        "Era esperado \"+=\"",
        "Esperado -=",                            //        "Era esperado \"-=\"",
        "Esperado ^",                            //        "Era esperado \"^\"",
        "Esperado main",                            //        "<programa> inv�lido",
        "Esperado tipo",                            //        "<tipo> inv�lido",
        "Esperado tipo void",                            //        "<tipo_modulo> inv�lido",
        "Esperado begin forward module",                            //        "<declaracao> inv�lido",
        "Esperado tipo )",                            //        "<parametros_formais> inv�lido",
        "Esperado ; )",                            //        "<parametros> inv�lido",
        "Esperado tipo",                            //        "<parametro> inv�lido",
        "Esperado ) , . ;",                            //        "<lista_id1> inv�lido",
        "Esperado identificador",                            //        "<lista_id> inv�lido",
        "Esperado begin module",                            //        "<modulo> inv�lido",
        "Esperado identificador tipo read write ( ^",                            //        "<corpo> inv�lido",
        "Esperado identificador tipo read write ( ^",                            //        "<declaracao_variaveis> inv�lido",
        "Esperado tipo",                            //        "<variavel> inv�lido",
        "Esperado identificador end ifFalseDo read write ( ^",                           //        "<lista_cmd1> inv�lido",
        "Esperado identificador read write ( ^",                           //        "<lista_cmd> inv�lido",
        "Esperado identificador read write ( ^",                            //        "<cmd> inv�lido",
        "Esperado ifTrueDo whileTrueDo whileFalseDo",                            //        "<cmd1> inv�lido",
        "Esperado identificador",                            //        "<atribuicao> inv�lido",
        "Esperado = += -=",                            //        "<operador_atribuicao> inv�lido",
        "Esperado read",                            //        "<entrada> inv�lido",
        "Esperado write",                            //        "<saida> inv�lido",
        "Esperado , )",                            //        "<lista_exp1> inv�lido",
        "Esperado expressao",                            //        "<lista_exp> inv�lido",
        "Esperado ifFalseDo end",                            //        "<selecao_false> inv�lido",
        "Esperado whileTrueDo whileFalseDo",                            //        "<repeticao_aux> inv�lido",
        "Esperado ^",                            //        "<retorno> inv�lido",
        "Esperado and or ) , .",                            //        "<expressao2> inv�lido",
        "Esperado and or",                            //        "<expressao1> inv�lido",
        "Esperado identificador contante inteira constante real constante string contante caractere ( + - false true",                            //        "<expressao> inv�lido",
        "Esperado identificador contante inteira constante real constante string contante caractere ( + - false true not",                            //        "<elemento> inv�lido",
        "Esperado and or ) == != < <= > >= , . ",                            //        "<relacional1> inv�lido",
        "Esperado identificador contante inteira constante real constante string contante caractere ( + - false true",                            //        "<relacional> inv�lido",
        "Esperado == != < <= > >=",                            //        "<operador_relacional> inv�lido",
        "Esperado + - == != < <= > >= and not )",                            //        "<aritmetica2> inv�lido",
        "Esperado + -",                            //        "<aritmetica1> inv�lido",
        "Esperado identificador contante inteira constante real constante string contante caractere ( + -",                            //        "<aritmetica> inv�lido",
        "Esperado and or ) , . * / + - == != < <= > >= expressao",                            //        "<termo2> inv�lido",
        "Esperado * /",                            //        "<termo1> inv�lido",
        "Esperado identificador contante inteira constante real constante string contante caractere ( + -",                            //        "<termo> inv�lido",
        "Esperado identificador contante inteira constante real constante string contante caractere ) ( + - false true not",                            //        "<fator2> inv�lido",
        "Esperado and or ( ) , . * / + - == != < <= > >=",                            //        "<fator1> inv�lido",
        "Esperado identificador contante inteira constante real constante string contante caractere ( + -",                            //        "<fator> inv�lido"
    };
}
